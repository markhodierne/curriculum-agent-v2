/**
 * Inngest Webhook API Route
 *
 * This Next.js API route serves as the webhook endpoint for Inngest Cloud to
 * communicate with our async agent functions (Reflection and Learning Agents).
 *
 * Inngest automatically generates GET, POST, and PUT handlers for:
 * - GET: Health check and function discovery
 * - POST: Execute functions in response to events
 * - PUT: Update function configurations
 *
 * Registered Functions:
 * 1. Reflection Agent - Evaluates Query Agent interactions using LLM-as-judge
 * 2. Learning Agent - Creates memories and extracts patterns from evaluations
 *
 * Event Flow:
 * 1. Query Agent emits `interaction.complete` event → Reflection Agent
 * 2. Reflection Agent emits `reflection.complete` event → Learning Agent
 * 3. Learning Agent creates :Memory node in Neo4j for future retrieval
 *
 * Configuration:
 * - Webhook URL: https://your-app.vercel.app/api/inngest
 * - Environment Variables:
 *   - INNGEST_EVENT_KEY: For sending events from Query Agent
 *   - INNGEST_SIGNING_KEY: For webhook request verification
 *
 * @see ARCHITECTURE.md Section 5.2 (Inngest Webhook)
 * @see FUNCTIONAL.md Section 4.4 (Three-Agent System)
 * @see CLAUDE.md (Inngest Integration)
 * @see https://www.inngest.com/docs/reference/serve
 *
 * @module app/api/inngest/route
 */

import { serve } from 'inngest/next';
import { inngest } from '@/lib/inngest/client';
import { reflectionFunction } from '@/lib/inngest/functions/reflection';
import { learningFunction } from '@/lib/inngest/functions/learning';

/**
 * Inngest serve configuration
 *
 * Exports GET, POST, PUT handlers for Inngest webhook communication.
 * These handlers are automatically generated by the Inngest SDK and handle:
 * - Event routing to registered functions
 * - Webhook signature verification
 * - Function execution with retry logic
 * - Dead letter queue management
 *
 * The `serve()` function returns an object with HTTP method handlers
 * that Next.js uses for the API route.
 */
export const { GET, POST, PUT } = serve({
  /**
   * Inngest client instance
   * Singleton configured with app ID and event key from environment
   */
  client: inngest,

  /**
   * Array of Inngest functions to register
   *
   * Each function listens for specific events and executes async workflows:
   * - reflectionFunction: Listens for 'interaction.complete', evaluates quality
   * - learningFunction: Listens for 'reflection.complete', creates memories
   */
  functions: [
    reflectionFunction,
    learningFunction,
  ],
});
